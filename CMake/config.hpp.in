/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * THIS HEADER IS GENERATED BY A TOOL - DO NOT MODIFY!
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/*****************************************************************************
 * \file config.hpp
 * \brief This header defines configuration settings for the library, driven
 *        through options from the build environment.
 *****************************************************************************/

/*
@LICENSE_TEXT@
*/
#ifndef ALLOY_CONFIG_HPP
#define ALLOY_CONFIG_HPP

//=============================================================================
// config : precision
//=============================================================================

#ifdef ALLOY_PRECISION_FLOAT
# error "ALLOY_PRECISION_FLOAT defined before inclusion of the config header"
#endif
#ifdef ALLOY_PRECISION_DOUBLE
# error "ALLOY_PRECISION_DOUBLE defined before inclusion of the config header"
#endif
#ifdef ALLOY_PRECISION_HALF
# error "ALLOY_PRECISION_HALF defined before inclusion of the config header"
#endif
#ifdef ALLOY_PRECISION_FIXED
# error "ALLOY_PRECISION_FIXED defined before inclusion of the config header"
#endif
#ifdef ALLOY_PRECISION
# error "ALLOY_PRECISION defined before inclusion of the config header"
#endif

//! \def ALLOY_PRECISION_FLOAT
//!
//! \brief Marker value for \ref ALLOY_PRECISION indicating 'float' precision
//!        is to be used
#define ALLOY_PRECISION_FLOAT 0

//! \def ALLOY_PRECISION_DOUBLE
//!
//! \brief Marker value for \ref ALLOY_PRECISION indicating 'double' precision
//!        is to be used
#define ALLOY_PRECISION_DOUBLE 1

//! \def ALLOY_PRECISION_HALF
//!
//! \brief Marker value for \ref ALLOY_PRECISION indicating 'half' precision
//!        is to be used
//!
//! TODO(bitwizeshift) add support for this option
#define ALLOY_PRECISION_HALF 2

//! \def ALLOY_PRECISION_FIXED
//!
//! \brief Marker value for \ref ALLOY_PRECISION indicating fixed-point 
//!        precision is to be used
//!
//! TODO(bitwizeshift) add support for this option
#define ALLOY_PRECISION_FIXED 3

//! \def ALLOY_PRECISION
//!
//! \brief Defines what the precision is used in this library (float,double)
#define ALLOY_PRECISION @ALLOY_PRECISION@

//=============================================================================
// config : build-type
//=============================================================================

#ifdef ALLOY_DEBUG
# error "ALLOY_DEBUG defined before inclusion of the config header"
#endif

//! \def ALLOY_DEBUG
//! \brief defines a portable macro for debug detection
#if !defined(NDEBUG)
# define ALLOY_DEBUG
#endif

//=============================================================================
// config : system
//=============================================================================

#ifdef ALLOY_OS_WINDOWS
# error "ALLOY_OS_WINDOWS defined before inclusion of the config header"
#endif
#ifdef ALLOY_OS_MACOS
# error "ALLOY_OS_WINDOWS defined before inclusion of the config header"
#endif
#ifdef ALLOY_OS_ANDROID
# error "ALLOY_OS_WINDOWS defined before inclusion of the config header"
#endif
#ifdef ALLOY_OS_FREEBSD
# error "ALLOY_OS_WINDOWS defined before inclusion of the config header"
#endif
#ifdef ALLOY_OS_LINUX
# error "ALLOY_OS_WINDOWS defined before inclusion of the config header"
#endif
#ifdef ALLOY_OS_FREEBSD
# error "ALLOY_OS_WINDOWS defined before inclusion of the config header"
#endif
#ifdef ALLOY_OS_OPENBSD
# error "ALLOY_OS_WINDOWS defined before inclusion of the config header"
#endif

#if defined(_WIN32)
# define ALLOY_OS_WINDOWS
#elif defined(__APPLE__) && defined(__MACH__)
# define ALLOY_OS_MACOS
#elif defined(__unix__)
# if defined(__ANDROID__)
#   define ALLOY_OS_ANDROID
# elif defined(__linux__)
#   define ALLOY_OS_LINUX
# elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
#   define ALLOY_OS_FREEBSD
# elif defined(__OpenBSD__)
#   define ALLOY_OS_OPENBSD
# else
#   error Unknown/unsupported unix-like operating system
# endif
#else
# error Unknown/unsupported operating system
#endif

//! \def ALLOY_COMPILER_EXCEPTIONS_ENABLED
//! \brief defines a macro for enabling exception handling
#define ALLOY_COMPILER_EXCEPTIONS_ENABLED @ALLOY_ENABLE_COMPILER_EXCEPTIONS@

//=============================================================================
// config : visibility macros
//=============================================================================

#ifdef ALLOY_API_EXPORT
# error "ALLOY_API_EXPORT defined before inclusion of the config header"
#endif
#ifdef ALLOY_API_IMPORT
# error "ALLOY_API_IMPORT defined before inclusion of the config header"
#endif
#ifdef ALLOY_API
# error "ALLOY_API defined before inclusion of the config header"
#endif

//! \def ALLOY_API_EXPORT
//!
//! \brief Portable symbol for exporting a symbol during build/link.

//! \def ALLOY_API_IMPORT
//!
//! \brief Portable symbol for importing a symbol during consumption.

//! \def ALLOY_API
//!
//! \brief Portable export/import macros used for building/consuming the
//!        library respectively.

#if defined(ALLOY_STATIC)
# define ALLOY_API_EXPORT
# define ALLOY_API_IMPORT
#else
# if defined(ALLOY_OS_WINDOWS)
#   define ALLOY_API_EXPORT __declspec(dllexport)
#   define ALLOY_API_IMPORT __declspec(dllimport)
#   ifdef _MSC_VER
#     pragma warning(disable: 4251)
#   endif
# elif defined(__GNUC__)
#   define ALLOY_API_EXPORT __attribute__ ((__visibility__ ("default")))
#   define ALLOY_API_IMPORT __attribute__ ((__visibility__ ("default")))
# endif
#endif

#if defined(ALLOY_EXPORT)
# define ALLOY_API ALLOY_API_EXPORT
#else
# define ALLOY_API ALLOY_API_IMPORT
#endif

#endif /* ALLOY_CONFIG_HPP */