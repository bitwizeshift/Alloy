name: build-linux

on: [push, pull_request]

jobs:
  ci:
    name: Ubuntu ${{ matrix.compiler }} ${{ matrix.arch }} ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}

    env:
      CMAKE_GENERATOR: Ninja
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        compiler: [gcc, clang]
        arch: [x86, x86_64]
        build_type: [Coverage, Debug, Release]

        include:

          - os: ubuntu-18.04
            compiler: gcc
            version: "9"

          - os: ubuntu-18.04
            compiler: clang
            version: "9"

        exclude:

          - build_type: Coverage
            arch: x86

          - build_type: Coverage
            arch: clang

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install
        run: |
          # CMake 3.15 allows specifying the generator using the CMAKE_GENERATOR
          # environment variable.
          curl -sSL https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4-Linux-x86_64.tar.gz -o cmake.tar.gz
          sudo tar xf cmake.tar.gz --strip 1 -C /usr/local
          # Required for libc6-dbg:i386 and g++-multilib packages which are
          # needed for x86 builds.
          sudo dpkg --add-architecture i386
          # clang-3.7 and earlier are not available in Bionic anymore so we get
          # them from the Xenial repositories instead.
          sudo add-apt-repository "deb http://dk.archive.ubuntu.com/ubuntu/ xenial main"
          sudo add-apt-repository "deb http://dk.archive.ubuntu.com/ubuntu/ xenial universe"
          # LLVM 9 is not in Bionic's repositories so we add the official LLVM repository.
          if [ "${{ matrix.compiler }}" = "clang" ] && [ "${{ matrix.version }}" = "9" ]; then
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
          fi
          sudo apt-get update
          sudo apt-get install -y ninja-build gcovr lcov
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
            echo "::set-env name=CC::gcc-${{ matrix.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.version }}"
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
            echo "::set-env name=CC::clang-${{ matrix.version }}"
            echo "::set-env name=CXX::clang++-${{ matrix.version }}"
          fi
          python -m pip install --upgrade pip cpp-coveralls
          pip install conan
          conan --version

      - name: Prepare Architecture
        run: |
          if [ "${{ matrix.arch }}" = "x86" ]; then
            echo "::set-env name=CXXFLAGS::${CXXFLAGS} -m32"
          fi

      - name: Create Conan Profile
        run: |
          conan profile new --detect default
          conan profile update settings.arch=${{ matrix.arch }} default

      - name: Configure
        run: |
          cmake -E remove_directory build
          mkdir build
          cd build
          build_type=${{ matrix.build_type }}
          if [ ${{ matrix.build_type }} = "Coverage" ]; then
            build_type=Debug # Coverage builds use 'Debug'
          fi
          conan install .. -s build_type=${build_type}
          cmake ..                                         \
             -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}   \
             -DALLOY_COMPILE_SELF_CONTAINMENT_TESTS=On     \
             -DALLOY_COMPILE_TESTS=On                      \
             -DALLOY_COMPILE_EXTRAS=On                     \
             -DALLOY_COMPILE_EXAMPLES=On                   \
             -DALLOY_ENABLE_EXCEPTIONS=On

      - name: Build
        run: |
          cd build
          cmake --build .

      - name: Test
        run: |
          cd build
          ctest --output-on-failure

      - name: Generate Coverage Report
        if: ${{ matrix.build_type }} == 'Coverage' && ${{ matrix.build_type }} == 'gcc'
        run: |
          gcov --long-file-names --preserve-paths --relative-only $(find build -name '*.o')
          lcov --capture --directory build --no-external --output-file build/coverage.info

      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          path-to-lcov: build/coverage.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
