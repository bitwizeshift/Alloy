name: build-windows

on: [push, pull_request]

jobs:
  test:
    name: Windows ${{matrix.compiler.name}} ${{matrix.arch}} ${{matrix.build_type}}
    runs-on: windows-latest
    env:
      build-directory: build

    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        build_type: [Debug, Release]
        compiler:
          # TODO(#8): Fix GCC build
          # - { name: "gcc", cc: gcc, cxx: g++ }
          - { name: "clang", cc: clang, cxx: clang++ }
          - { name: "clang-cl", cc: clang-cl, cxx: clang-cl }
          - { name: "cl", cc: cl, cxx: cl }

        # Visual Studios specifies strange terminology for x86/x86_64
        include:
          - arch: x86
            vs_arch: Win32
          - arch: x86_64
            vs_arch: x64

        # GCC fails to compile 32-bit correctly with Github's Windows runner
        # configuration.
        exclude:
          - arch: x86
            compiler: { name: "gcc", cc: gcc, cxx: g++ }

    steps:

      - name: Clone
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Prepare Environment
        run: |
          curl -fsSL -o LLVM10.exe https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/LLVM-10.0.0-win64.exe ; 7z x LLVM10.exe -y -o"C:/Program Files/LLVM"

          python -m pip install --upgrade pip
          pip install conan
          conan --version
          cmake -E make_directory ${{env.build-directory}}

      - name: Create Conan Profile (MSVC)
        if: matrix.compiler.name == 'cl'
        run: |
          conan profile new default
          conan profile update settings.compiler="Visual Studio" default
          if ("${{matrix.build_type}}" -eq "Release") {
            conan profile update settings.compiler.runtime=MD default
          } else {
            conan profile update settings.compiler.runtime=MDd default
          }
          conan profile update settings.os=Windows default

      - name: Create Conan Profile (other)
        if: matrix.compiler.name != 'cl'
        env:
          CC: ${{matrix.compiler.cc}}
          CXX: ${{matrix.compiler.cxx}}
        run: conan profile new --detect default

      - name: Install Conan Dependencies
        working-directory: ${{env.build-directory}}
        run: conan install .. -s build_type=${{matrix.build_type}}

      - name: Prepare Architecture
        if: (matrix.compiler.name == 'clang' || matrix.compiler.name == 'gcc') && matrix.arch == 'x86'
        shell: bash
        run: echo "CXXFLAGS=${CXXFLAGS} -m32" >> ${GITHUB_ENV}

      - name: Configure (gcc)
        working-directory: ${{env.build-directory}}
        if: matrix.compiler.name == 'gcc'
        env:
          CC: gcc
          CXX: g++
        run: |
          cmake .. -G"MinGW Makefiles"                    `
            -DCMAKE_BUILD_TYPE=${{matrix.build_type}}     `
            -DALLOY_COMPILE_SELF_CONTAINMENT_TESTS=On     `
            -DALLOY_COMPILE_TESTS=On                      `
            -DALLOY_COMPILE_EXTRAS=On                     `
            -DALLOY_COMPILE_EXAMPLES=On                   `
            -DALLOY_ENABLE_EXCEPTIONS=On

      - name: Configure (clang)
        working-directory: ${{env.build-directory}}
        if: matrix.compiler.name == 'clang'
        run: |
          cmake .. -G"MinGW Makefiles"                    `
            -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang++.exe" `
            -DCMAKE_BUILD_TYPE=${{matrix.build_type}}     `
            -DALLOY_COMPILE_SELF_CONTAINMENT_TESTS=On     `
            -DALLOY_COMPILE_TESTS=On                      `
            -DALLOY_COMPILE_EXTRAS=On                     `
            -DALLOY_COMPILE_EXAMPLES=On                   `
            -DALLOY_ENABLE_EXCEPTIONS=On

      - name: Configure (clang-cl)
        working-directory: ${{env.build-directory}}
        if: matrix.compiler.name == 'clang-cl'
        run: |
          cmake .. -G"Visual Studio 16 2019" -A ${{matrix.vs_arch}} -T ClangCL `
            -DALLOY_COMPILE_SELF_CONTAINMENT_TESTS=On     `
            -DALLOY_COMPILE_TESTS=On                      `
            -DALLOY_COMPILE_EXTRAS=On                     `
            -DALLOY_COMPILE_EXAMPLES=On                   `
            -DALLOY_ENABLE_EXCEPTIONS=On

      - name: Configure (MSVC)
        working-directory: ${{env.build-directory}}
        if: matrix.compiler.name == 'cl'
        run: |
          cmake .. -G"Visual Studio 16 2019" -A ${{matrix.vs_arch}} `
            -DALLOY_COMPILE_SELF_CONTAINMENT_TESTS=On     `
            -DALLOY_COMPILE_TESTS=On                      `
            -DALLOY_COMPILE_EXTRAS=On                     `
            -DALLOY_COMPILE_EXAMPLES=On                   `
            -DALLOY_ENABLE_EXCEPTIONS=On

      - name: Build
        working-directory: ${{env.build-directory}}
        run: cmake --build . --config ${{matrix.build_type}}

      - name: Test
        working-directory: ${{env.build-directory}}
        run: ctest --output-on-failure
