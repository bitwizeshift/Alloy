################################################################################
# Travis-CI
# ---------
# Pipeline: Build -> Test -> Validate -> Deploy
#
# Build: Builds the project
# Test: Runs unit tests
# Validate: Runs sanitizers
# Deploy: Publishes documentation and binary
################################################################################

# Setup
################################################################################

# Enable C++
language: cpp
cache: ccache

dist: trusty
sudo: required
group: edge
addons:
  apt:
    packages:
      - "python3"
      - "python3-pip"

branches:
  except:
    - prototype/.*
    - gh-pages

# Set python version to 3.6
python:
  - "3.6"

# Agents
################################################################################

osx_agent: &osx_agent
  os: osx
  osx_image: xcode10
  language: generic
  compiler: clang
  env:
    - C_COMPILER=clang
    - CXX_COMPILER=clang++

linux_gcc_agent: &linux_gcc_agent
  os: linux
  compiler: gcc
  env:
    - C_COMPILER=gcc-8
    - CXX_COMPILER=g++-8
  addons:
    apt:
      sources: ['ubuntu-toolchain-r-test']
      packages: ['g++-8', 'ninja-build']

linux_clang_agent: &linux_clang_agent
  os: linux
  compiler: clang
  env:
    - C_COMPILER=clang-8
    - CXX_COMPILER=clang++-8
  addons:
    apt:
      sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-8']
      packages: ['g++-8', 'clang-8', 'ninja-build']

linux_doxygen_agent: &linux_doxygen_agent
  os: linux
  compiler: gcc
  addons:
  env:
    - C_COMPILER=gcc-8
    - CXX_COMPILER=g++-8
  addons:
    apt:
      sources: ['ubuntu-toolchain-r-test']
      packages: ['doxygen', 'g++-8', 'ninja-build']

# Stages
################################################################################

stages:
  - build
  - test
  - validate
  - deploy

# Jobs
################################################################################

jobs:
  include:
    # Build
    ############################################################################

    - <<: *linux_gcc_agent
      stage: build
      name: "Build (linux-g++-8)"
      script: ./.travis/build.sh

    - <<: *linux_clang_agent
      stage: build
      name: "Build (linux-clang++-6.0)"
      script: ./.travis/build.sh

    - <<: *osx_agent
      stage: build
      name: "Build (macos-xcode10-clang)"
      script: ./.travis/build.sh

    # Test
    ############################################################################

    # TODO(bitwizeshift):
    #   Enable once build->test->deploy pipeline is set up
    #
    # - <<: *linux_gcc_agent
    #   stage: test
    #   name: "Unit Test (linux-g++-8)"
    #   script: ./.travis/test.sh
    #
    # - <<: *linux_clang_agent
    #   stage: test
    #   name: "Unit Test (linux-clang++-6.0)"
    #   script: ./.travis/test.sh
    #
    # - <<: *osx_agent
    #   stage: test
    #   name: "Unit Test (macos-xcode10-clang)"
    #   script: ./.travis/test.sh

    # Validate
    ############################################################################

    # Sanitizers disabled from CI until they are added to the CMakeLists.txt

    # - <<: *linux_clang_agent
    #   stage: validate
    #   name: "Undefined Behavior Sanitizer (linux-clang++-6.0)"
    #   script: ./.travis/validate-sanitize.sh ubsan

    # - <<: *linux_clang_agent
    #   stage: validate
    #   name: "Address Sanitizer (linux-clang++-6.0)"
    #   script: ./.travis/validate-sanitize.sh asan

    # - <<: *linux_clang_agent
    #   stage: validate
    #   name: "Memory Sanitizer (linux-clang++-6.0)"
    #   script: ./.travis/validate-sanitize.sh msan

    # - <<: *linux_gcc_agent
    #   stage: validate
    #   name: "Code Coverage (linux-g++-8)"
    #   script: ./.travis/validate-coverage.sh

    # TODO(bitwizeshift): Add valgrind agent

    # - <<: *linux_gcc_agent
    #   stage: validate
    #   name: "Code Coverage (linux-g++-8)"
    #   script: ./.travis/validate-valgrind.sh

    # Deploy
    ############################################################################

    - <<: *linux_doxygen_agent
      stage: deploy
      name: "Deploy tag (doxygen)"
      if: (tag =~ ^v) AND (type = push)
      script: ./.travis/deploy-doxygen.sh

    - <<: *linux_doxygen_agent
      stage: deploy
      name: "Deploy latest (doxygen)"
      if: (branch = master) AND (type = push)
      script: ./.travis/deploy-doxygen.sh latest

    - <<: *linux_gcc_agent
      stage: deploy
      name: "Deploy (linux-g++-8)"
      if: (tag =~ ^v) AND (branch = master) AND (type = push)
      script: ./.travis/deploy-conan.sh

    - <<: *linux_clang_agent
      stage: deploy
      name: "Deploy (linux-clang++-6.0)"
      if: (tag =~ ^v) AND (branch = master) AND (type = push)
      script: ./.travis/deploy-conan.sh

    - <<: *osx_agent
      stage: deploy
      name: "Deploy (macos-xcode10-clang)"
      if: (tag =~ ^v) AND (branch = master) AND (type = push)
      script: ./.travis/deploy-conan.sh

before_install:
  - ./.travis/before-install.sh

install:
  - ./.travis/install.sh

before_script:
  # Enable ccache to optimize builds
  # - export CC="ccache ${C_COMPILER}"
  # - export CXX="ccache ${CXX_COMPILER}"
  - export CC=${C_COMPILER}
  - export CXX=${CXX_COMPILER}

  # Dump settings
  - uname -a
  - $CXX --version
  - cmake --version
  - ninja --version
  - python3 --version
  - conan --version